---
- hosts: sample_platform_4
  remote_user: root
  vars:
    install_user: www-data
    install_group: www-data
    data_log_dir: "{{ data_dir }}/LogFiles"
    data_result_dir: "{{ data_dir }}/TestResults"
    data_media_sample_dir: "{{ data_dir }}/TestFiles/media"
    mysql_root_pass: "{{ lookup('password', '~/credentials/' + ansible_host + '/mysql/root length=15 chars=ascii_letters') }}"
    mysql_db_pass: "{{ lookup('password', '~/credentials/' + ansible_host + '/mysql/app length=15 chars=ascii_letters') }}"
    dh_param: /etc/ssl/dhparam.pem
    ssl_key: /etc/ssl/private/sample_platform.key
    ssl_cert: /etc/ssl/sample_platform.crt
    platform_file: /etc/init.d/platform
    smb_user: ci_bot
    smb_pass: "{{ lookup('password', '~/credentials/' + ansible_host + '/smb_password length=15 chars=ascii_letters') }}"

  tasks:
    - name: Check if configuration file already exists
        stat:
          path: sample_platform_config.py
        register: config_created
    - fail: sample_platform_config.py is missing! Run the configure_platform first
      when: not config_created.stat.exists
    - name: Install python 3
      apt:
        update_cache: yes
        pkg:
          - python3
          - python3-pip
          - python3-libvirt
          - python3-pymysql
    - name: Switch default python interpreter to py3
      shell: update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 && update-alternatives --install /usr/bin/python python /usr/bin/python3.7 2 && update-alternatives --auto python
    - name: Install dependencies
      apt:
        pkg:
          - nginx
          - qemu-kvm
          - libvirt-clients
          - libvirt-dev
          - virt-manager
          - mediainfo
          - mariadb-server
          - git
          - samba
    - name: Update pip, setuptools and wheel
      pip:
        name: pip,setuptools,wheel
        extra_args: --upgrade
    - name: Clone repository
      git:
        repo: https://github.com/CCExtractor/sample-platform.git
        dest: "{{ install_dir }}"
    - name: Make www-data owner of the folder
      file:
        path: "{{ install_dir }}"
        owner: "{{ install_user }}"
        group: "{{ install_group }}"
        mode: 0644
    - name: Install pip dependencies
      pip:
        requirements: "{{ install_dir }}/requirements.txt"
        state: forcereinstall
    - name: Configure MySQL
      block:
        - name: Make sure the MySQL server is running at startup
          service:
            name: mysql
            state: started
            enabled: yes
        - name: Change password for MySQL root user
          mysql_user:
            login_user: root
            login_password: "{{ mysql_root_pass }}"
            login_unix_socket: /var/run/mysqld/mysqld.sock
            check_implicit_admin: yes
            name: root
            password: "{{ mysql_root_pass }}"
            host: localhost
            priv: "*.*:ALL,GRANT"
        - name: Create .my.cnf MySQL config for root user
          template:
            src: .my.cnf.j2
            dest: /root/.my.cnf
            owner: root
            group: root
            mode: '0600'
          vars:
            password: "{{ mysql_root_pass }}"
        - name: Create a new database with name '{{ mysql_db_name }}'
          mysql_db:
            name: "{{ mysql_db_name }}"
            state: present
        - name: 'Add a Sample Platform user ({{ mysql_db_user }}) for MySQL'
          mysql_user:
            login_user: root
            login_password: "{{ mysql_root_pass }}"
            name: "{{ mysql_db_user }}"
            password: "{{ mysql_db_pass }}"
            host: localhost
            priv: "{{ mysql_db_name }}.*:ALL,GRANT"
    - name: Create all directories for holding data
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ install_user }}"
        group: "{{ install_group }}"
        mode: 0755
      loop:
        - "{{ data_dir }}"
        - "{{ data_dir }}/ci-tests"
        - "{{ data_dir }}/TempFiles"
        - "{{ data_log_dir }}"
        - "{{ data_result_dir }}"
        - "{{ data_dir }}/TestFiles"
        - "{{ data_media_sample_dir }}"
        - "{{ data_dir }}/QueuedFiles"
    - name: Configure Samba
      block:
        - name: Add Samba share
          blockinfile:
            path: /etc/samba/smb.conf
            block: |
              [repository]
              path = {{ data_dir }}
              available = yes
              valid users = {{ smb_user }}
              read only = yes
              browseable = yes
              public = yes
              writable = no
        - name: Make Samba only listening on localhost and custom subnet
          lineinfile:
            path: /etc/samba/smb.conf
            state: present
            regexp: '^;?   interfaces\s'
            line: '   interfaces = 127.0.0.0/8 10.0.1.1'
        - name: Make Samba only listen to the interfaces defined above
          lineinfile:
            path: /etc/samba/smb.conf
            state: present
            regexp: '^;?   bind interfaces\s'
            line: '   bind interfaces only = yes'
        - name: Reload Samba to apply config changes
          service:
            name: smbd
            state: reloaded
        - name: 'Add {{ smb_user }} user'
          user:
            name: '{{ smb_user }}'
            comment: "Bot account for accessing the SMB share"
        - name: Add SMB user
          shell: "printf '{{ smb_pass }}\n{{ smb_pass }}\n' | smbpasswd -a {{ smb_user }}"
    - name: Create Nginx config file
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/sample_platform
      vars:
        web_dir: "{{ install_dir }}"
        sample_dir: "{{ data_media_sample_dir }}"
        log_dir: "{{ data_log_dir }}"
        result_dir: "{{ data_result_dir }}"
    - name: Transfer DH params
      copy:
        src: ffdhe2048.txt
        dest: "{{ dh_param }}"
    - name: Enable Sample Platform config file
      file:
        src: /etc/nginx/sites-available/sample_platform
        dest: /etc/nginx/sites-enabled/sample_platform
        state: link
    - name: Generate self-signed certficate
      include_tasks: task_ssl_cert_self_signed.yaml
      vars:
        task: generate
        key_path: "{{ ssl_key }}"
        cert_path: "{{ ssl_cert }}"
        server_hostname: "{{ domain_name }}"
        reload_nginx: yes
    - name: Install Let's Encrypt module
      include_tasks: task_ssl_cert_with_acme-tiny.yaml
      when: use_lets_encrypt
      vars:
        task: install
        acme_private_key: '{{ ssl_key }}'
        server_hostname: "{{ domain_name }}"
    - name: Generate Let's Encrypt certificate
      include_tasks: task_ssl_cert_with_acme-tiny.yaml
      when: use_lets_encrypt
      vars:
        task: generate
    - name: Add auto-launch service for platform
      template:
        src: service.j2
        dest: '{{ platform_file }}'
        mode: '0755'
    - name: Enable auto-launch service for platform
      command: update-rc.d platform defaults
    - name: Configure the Sample Platform's python config file
      copy:
        src: sample_platform_config.py
        dest: "{{ install_dir }}/config.py"
    - name: Start the service
      command: update-rc.d platform start
